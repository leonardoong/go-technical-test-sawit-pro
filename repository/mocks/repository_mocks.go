// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/SawitProRecruitment/UserService/model"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/SawitProRecruitment/UserService/repository"
)

// RepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type RepositoryInterface struct {
	mock.Mock
}

// GetLoginData provides a mock function with given fields: ctx, input
func (_m *RepositoryInterface) GetLoginData(ctx context.Context, input repository.GetLoginDataInput) (repository.GetLoginDataOutput, error) {
	ret := _m.Called(ctx, input)

	var r0 repository.GetLoginDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.GetLoginDataInput) (repository.GetLoginDataOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.GetLoginDataInput) repository.GetLoginDataOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(repository.GetLoginDataOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.GetLoginDataInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDataByUserID provides a mock function with given fields: ctx, input
func (_m *RepositoryInterface) GetUserDataByUserID(ctx context.Context, input repository.GetUserDataByUserIDInput) (model.User, error) {
	ret := _m.Called(ctx, input)

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.GetUserDataByUserIDInput) (model.User, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.GetUserDataByUserIDInput) model.User); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.GetUserDataByUserIDInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: ctx, in
func (_m *RepositoryInterface) InsertUser(ctx context.Context, in repository.InsertUserInput) (repository.InsertUserOutput, error) {
	ret := _m.Called(ctx, in)

	var r0 repository.InsertUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.InsertUserInput) (repository.InsertUserOutput, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.InsertUserInput) repository.InsertUserOutput); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(repository.InsertUserOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.InsertUserInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSuccessfulLogin provides a mock function with given fields: ctx, in
func (_m *RepositoryInterface) UpdateSuccessfulLogin(ctx context.Context, in repository.UpdateSuccessfulLoginInput) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateSuccessfulLoginInput) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserData provides a mock function with given fields: ctx, in
func (_m *RepositoryInterface) UpdateUserData(ctx context.Context, in repository.UpdateUserDataInput) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateUserDataInput) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryInterface creates a new instance of RepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryInterface {
	mock := &RepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
