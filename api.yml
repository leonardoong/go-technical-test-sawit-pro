# This is the OpenAPI specification for your service. It is used to generate the client code.
# To generate the server code, use the Gradle task `openApiGenerate`. The 
# generated code will be placed in `build/generate-resources/main`.
#
# We will evaluate you based on how well you design your API.
# 1. How well it follows REST principles.
# 2. How easy it is to understand and use.
#
# References
# 1. https://swagger.io/specification/
openapi: "3.0.0"
info:
  version: 1.0.0
  title: User Service
  license:
    name: MIT
servers:
  - url: http://localhost
paths:
  /register:
    post:
      summary: Register new user endpoint with phone number, full name and password.
      operationId: userRegistration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserRequest"
      responses:
        '200':
          description: User registered successfully.
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/RegisterUserResponse"
        '400':
          description: Bad Request. Invalid Input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '409':
          description: Status Conflict.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /login:
    post:
      summary: User login with phone number and password.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        '200':
          description: User login successfully.
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/LoginResponse"
        '400':
          description: Unsuccessful login. Invalid Input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users:
    get:
      summary: Get user data from token.
      operationId: users
      securitySchemes:
        token:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: User data.
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/UsersResponse"
        '403':
          description: Forbidden code.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /update-user:
    post:
      summary: Update user data with token.
      operationId: updateUser
      securitySchemes:
        token:
          type: http
          scheme: bearer
          bearerFormat: JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        '200':
          description: Update user data successful.
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/UpdateUserResponse"
        '403':
          description: Forbidden code.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '409':
          description: Status Conflict.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    HelloResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
        error_messages:
          type: array
          items:
            type: string
    RegisterUserRequest:
      type: object
      required:
        - phone_number
        - full_name
        - password
      properties:
        phone_number:
          type: string
          description: The user's phone number.
        full_name:
          type: string
          description: The user's full name.
        password:
          type: string
          description: The user's password.
    RegisterUserResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    LoginRequest:
      type: object
      required:
        - phone_number
        - password
      properties:
        phone_number:
          type: string
          description: The user's phone number.
        password:
          type: string
          description: The user's password.
    LoginResponse:
      type: object
      required:
        - message
        - jwt
      properties:
        message:
          type: string
        jwt:
          type: string
    UsersResponse:
      type: object
      required:
        - full_name
        - phone_number
      properties:
        full_name:
          type: string
        phone_number:
          type: string
    UpdateUserRequest:
      type: object
      properties:
        phone_number:
          type: string
          description: The user's phone number.
        full_name:
          type: string
          description: The user's full name.
    UpdateUserResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string

    
